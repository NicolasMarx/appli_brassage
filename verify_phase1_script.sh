#!/bin/bash

# =============================================================================
# SCRIPT DE V√âRIFICATION PHASE 1 - FONDATIONS DDD/CQRS
# =============================================================================
# V√©rifie que tous les √©l√©ments critiques de la Phase 1 sont en place
# =============================================================================

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}"
echo "üîç =============================================================================="
echo "   V√âRIFICATION PHASE 1 - FONDATIONS DDD/CQRS"
echo "==============================================================================${NC}"

ERRORS=0
WARNINGS=0

# Fonction d'affichage des r√©sultats
check_ok() {
    echo -e "   ${GREEN}‚úÖ $1${NC}"
}

check_error() {
    echo -e "   ${RED}‚ùå $1${NC}"
    ((ERRORS++))
}

check_warning() {
    echo -e "   ${YELLOW}‚ö†Ô∏è  $1${NC}"
    ((WARNINGS++))
}

# =============================================================================
# V√âRIFICATION STRUCTURE DE FICHIERS
# =============================================================================

echo ""
echo -e "${BLUE}üìÅ V√©rification structure de fichiers${NC}"

# Value Objects
if [ -f "app/domain/shared/Email.scala" ]; then
    check_ok "Email.scala pr√©sent"
else
    check_error "Email.scala manquant"
fi

if [ -f "app/domain/shared/NonEmptyString.scala" ]; then
    check_ok "NonEmptyString.scala pr√©sent"
else
    check_error "NonEmptyString.scala manquant"
fi

if [ -f "app/domain/shared/Percentage.scala" ]; then
    check_ok "Percentage.scala pr√©sent"
else
    check_error "Percentage.scala manquant"
fi

# Domaine commun
if [ -f "app/domain/common/DomainError.scala" ]; then
    check_ok "DomainError.scala pr√©sent"
else
    check_error "DomainError.scala manquant"
fi

if [ -f "app/domain/common/DomainEvent.scala" ]; then
    check_ok "DomainEvent.scala pr√©sent"
else
    check_error "DomainEvent.scala manquant"
fi

# Admin
if [ -f "app/domain/admin/model/AdminId.scala" ]; then
    check_ok "AdminId.scala pr√©sent"
else
    check_error "AdminId.scala manquant"
fi

if [ -f "app/domain/admin/model/AdminRole.scala" ]; then
    check_ok "AdminRole.scala pr√©sent"
else
    check_error "AdminRole.scala manquant"
fi

if [ -f "app/domain/admin/model/AdminAggregate.scala" ]; then
    check_ok "AdminAggregate.scala pr√©sent"
else
    check_error "AdminAggregate.scala manquant"
fi

if [ -f "app/domain/admin/model/AdminEvents.scala" ]; then
    check_ok "AdminEvents.scala pr√©sent"
else
    check_error "AdminEvents.scala manquant"
fi

# Services
if [ -f "app/domain/admin/services/PasswordService.scala" ]; then
    check_ok "PasswordService.scala pr√©sent"
else
    check_error "PasswordService.scala manquant"
fi

# Configuration
if [ -f "conf/evolutions/default/1.sql" ]; then
    check_ok "√âvolution 1.sql pr√©sente"
else
    check_error "√âvolution 1.sql manquante"
fi

# =============================================================================
# V√âRIFICATION COMPILATION
# =============================================================================

echo ""
echo -e "${BLUE}üî® V√©rification compilation${NC}"

echo "   Compilation en cours..."
if sbt compile > /tmp/compile.log 2>&1; then
    check_ok "Compilation r√©ussie"
else
    check_error "Erreurs de compilation d√©tect√©es"
    echo -e "${RED}   D√©tails des erreurs de compilation :${NC}"
    tail -20 /tmp/compile.log | sed 's/^/     /'
fi

# =============================================================================
# V√âRIFICATION BASE DE DONN√âES
# =============================================================================

echo ""
echo -e "${BLUE}üóÑÔ∏è  V√©rification base de donn√©es${NC}"

# V√©rifier Docker Compose
if command -v docker-compose &> /dev/null; then
    check_ok "Docker Compose disponible"
    
    # V√©rifier si PostgreSQL tourne
    if docker-compose ps | grep -q postgres.*Up; then
        check_ok "PostgreSQL en cours d'ex√©cution"
        
        # V√©rifier connectivit√©
       if docker-compose exec -T db psql -U postgres -d appli_brassage -c "SELECT 1;" > /dev/null 2>&1; then

            check_ok "Connexion PostgreSQL fonctionnelle"
            
            # V√©rifier tables cr√©√©es
           TABLES=$(docker-compose exec -T db psql -U postgres -d appli_brassage -t -c "SELECT count(*) FROM information_schema.tables WHERE table_schema = 'public';")
            if [ "$TABLES" -gt 5 ]; then
                check_ok "Tables cr√©√©es ($TABLES tables d√©tect√©es)"
            else
                check_warning "Peu de tables cr√©√©es ($TABLES), √©volutions peut-√™tre non appliqu√©es"
            fi
        else
            check_error "Impossible de se connecter √† PostgreSQL"
        fi
    else
        check_warning "PostgreSQL n'est pas en cours d'ex√©cution (docker-compose up -d postgres)"
    fi
else
    check_warning "Docker Compose non disponible"
fi

# =============================================================================
# V√âRIFICATION D√âPENDANCES
# =============================================================================

echo ""
echo -e "${BLUE}üì¶ V√©rification d√©pendances${NC}"

# V√©rifier build.sbt
if grep -q "jbcrypt" build.sbt 2>/dev/null; then
    check_ok "D√©pendance jbcrypt pr√©sente"
else
    check_warning "D√©pendance jbcrypt non trouv√©e dans build.sbt"
fi

if grep -q "play-slick" build.sbt 2>/dev/null; then
    check_ok "D√©pendance play-slick pr√©sente"
else
    check_warning "D√©pendance play-slick non trouv√©e dans build.sbt"
fi

if grep -q "postgresql" build.sbt 2>/dev/null; then
    check_ok "Driver PostgreSQL pr√©sent"
else
    check_warning "Driver PostgreSQL non trouv√© dans build.sbt"
fi

# =============================================================================
# V√âRIFICATION CONFIGURATION
# =============================================================================

echo ""
echo -e "${BLUE}‚öôÔ∏è  V√©rification configuration${NC}"

if [ -f "conf/application.conf" ]; then
    check_ok "Configuration application.conf pr√©sente"
    
    if grep -q "slick.dbs.default" conf/application.conf; then
        check_ok "Configuration Slick trouv√©e"
    else
        check_warning "Configuration Slick non trouv√©e"
    fi
    
    if grep -q "ai.monitoring" conf/application.conf; then
        check_ok "Configuration IA trouv√©e"
    else
        check_warning "Configuration IA non trouv√©e"
    fi
else
    check_error "Fichier application.conf manquant"
fi

if [ -f "conf/routes" ]; then
    check_ok "Fichier routes pr√©sent"
    
    if grep -q "/api/admin" conf/routes; then
        check_ok "Routes API admin trouv√©es"
    else
        check_warning "Routes API admin non trouv√©es"
    fi
else
    check_error "Fichier routes manquant"
fi

# =============================================================================
# V√âRIFICATION S√âCURIT√â
# =============================================================================

echo ""
echo -e "${BLUE}üîê V√©rification s√©curit√©${NC}"

# V√©rifier configuration s√©curit√©
if grep -q "play.http.secret.key.*changeme" conf/application.conf 2>/dev/null; then
    check_warning "Cl√© secr√®te par d√©faut d√©tect√©e (√† changer en production)"
else
    check_ok "Cl√© secr√®te configur√©e"
fi

if grep -q "CSRF" conf/application.conf 2>/dev/null; then
    check_ok "Protection CSRF configur√©e"
else
    check_warning "Protection CSRF non trouv√©e"
fi

# =============================================================================
# TESTS UNITAIRES BASIQUES
# =============================================================================

echo ""
echo -e "${BLUE}üß™ V√©rification tests${NC}"

if [ -d "test" ]; then
    check_ok "R√©pertoire test pr√©sent"
    
    echo "   Ex√©cution tests unitaires de base..."
    if sbt "testOnly *Email*" > /tmp/test.log 2>&1; then
        check_ok "Tests Value Objects passent"
    else
        check_warning "Certains tests √©chouent (v√©rifiez /tmp/test.log)"
    fi
else
    check_warning "R√©pertoire test manquant"
fi

# =============================================================================
# RAPPORT FINAL
# =============================================================================

echo ""
echo -e "${BLUE}üìä Rapport final Phase 1${NC}"
echo ""

if [ $ERRORS -eq 0 ]; then
    echo -e "${GREEN}‚úÖ PHASE 1 VALID√âE - Fondations solides !${NC}"
    echo ""
    echo -e "${GREEN}Pr√™t pour la Phase 2 - Domaine Hops${NC}"
    echo ""
    echo -e "${BLUE}Prochaines √©tapes :${NC}"
    echo "   1. Impl√©menter HopAggregate"
    echo "   2. Cr√©er API publique houblons"
    echo "   3. Cr√©er interface admin houblons"
    echo "   4. Impl√©menter premiers tests d'int√©gration"
    
elif [ $ERRORS -le 2 ] && [ $WARNINGS -le 5 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  PHASE 1 PARTIELLEMENT VALID√âE${NC}"
    echo ""
    echo -e "${YELLOW}$ERRORS erreur(s) et $WARNINGS avertissement(s)${NC}"
    echo ""
    echo -e "${BLUE}Corrections recommand√©es avant Phase 2 :${NC}"
    echo "   - Corriger les erreurs de compilation"
    echo "   - V√©rifier la base de donn√©es"
    echo "   - Compl√©ter la configuration manquante"
    
else
    echo -e "${RED}‚ùå PHASE 1 NON VALID√âE${NC}"
    echo ""
    echo -e "${RED}$ERRORS erreur(s) critique(s) et $WARNINGS avertissement(s)${NC}"
    echo ""
    echo -e "${RED}Actions requises :${NC}"
    echo "   - Corriger toutes les erreurs de compilation"
    echo "   - Impl√©menter les Value Objects manquants"
    echo "   - Configurer la base de donn√©es"
    echo "   - Revoir la structure des fichiers"
    echo ""
    echo -e "${RED}Ne pas passer √† la Phase 2 avant validation compl√®te${NC}"
fi

echo ""
echo -e "${BLUE}Logs d√©taill√©s disponibles :${NC}"
echo "   - Compilation : /tmp/compile.log"
echo "   - Tests : /tmp/test.log"
echo ""

exit $ERRORS