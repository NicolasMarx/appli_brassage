package modules

import com.google.inject.AbstractModule
import domain.hops.repositories.{HopReadRepository, HopWriteRepository}
import domain.malts.repositories.{MaltReadRepository, MaltWriteRepository}
import infrastructure.persistence.slick.repositories.hops.{SlickHopReadRepository, SlickHopWriteRepository}
import infrastructure.persistence.slick.repositories.malts.{SlickMaltReadRepository, SlickMaltWriteRepository}

/**
 * Bindings Guice - Connecte les interfaces du domaine aux implémentations Slick
 */
final class BindingsModule extends AbstractModule {
  override def configure(): Unit = {

    // ===== HOP REPOSITORIES =====
    bind(classOf[HopReadRepository]).to(classOf[SlickHopReadRepository])
    bind(classOf[HopWriteRepository]).to(classOf[SlickHopWriteRepository])

    // ===== MALT REPOSITORIES (NOUVEAU) =====
    bind(classOf[MaltReadRepository]).to(classOf[SlickMaltReadRepository])
    bind(classOf[MaltWriteRepository]).to(classOf[SlickMaltWriteRepository])

    println("BindingsModule chargé - Repositories Hops + Malts connectés à PostgreSQL")

    // Bindings domaine Malts
    bind(classOf[domain.malts.repositories.MaltReadRepository]).to(classOf[infrastructure.persistence.slick.repositories.malts.SlickMaltReadRepository]).asEagerSingleton()
    bind(classOf[domain.malts.repositories.MaltWriteRepository]).to(classOf[infrastructure.persistence.slick.repositories.malts.SlickMaltWriteRepository]).asEagerSingleton()
  }
}