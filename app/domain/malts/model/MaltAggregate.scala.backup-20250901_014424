package domain.malts.model

import domain.shared.NonEmptyString
import java.time.Instant

/**
 * Agrégat Malt avec toutes les propriétés requises
 * Version corrigée avec propriétés calculées
 */
case class MaltAggregate(
  id: MaltId,
  name: NonEmptyString,
  maltType: MaltType,
  ebcColor: EBCColor,
  extractionRate: ExtractionRate,
  diastaticPower: DiastaticPower,
  originCode: String,
  description: Option[String],
  flavorProfiles: List[String],
  source: MaltSource,
  isActive: Boolean,
  credibilityScore: Double,
  createdAt: Instant,
  updatedAt: Instant,
  version: Long
) {
  
  // Propriétés calculées existantes
  def needsReview: Boolean = credibilityScore < 0.8
  def canSelfConvert: Boolean = diastaticPower.canConvertAdjuncts
  def qualityScore: Double = credibilityScore * 100
  def isBaseMalt: Boolean = maltType == MaltType.BASE
  
  def maxRecommendedPercent: Option[Double] = maltType match {
    case MaltType.BASE => Some(100)
    case MaltType.CRYSTAL => Some(20)
    case MaltType.ROASTED => Some(10)
    case _ => Some(30)
  }
  
  // NOUVELLE PROPRIÉTÉ requise par le code existant
  def enzymePowerCategory: String = diastaticPower.enzymePowerCategory
  
  // NOUVELLE MÉTHODE pour validation complexe
  def canBeUsedInBrewing: Boolean = {
    isActive && 
    ebcColor.isMaltCanBeUsed && 
    extractionRate.value > 0 &&
    diastaticPower.value >= 0
  }
  
  // Méthodes de mise à jour
  def activate(): MaltAggregate = this.copy(
    isActive = true,
    updatedAt = Instant.now(),
    version = version + 1
  )
  
  def deactivate(): MaltAggregate = this.copy(
    isActive = false,
    updatedAt = Instant.now(),
    version = version + 1
  )
  
  def updateCredibility(newScore: Double): MaltAggregate = this.copy(
    credibilityScore = math.max(0.0, math.min(1.0, newScore)),
    updatedAt = Instant.now(),
    version = version + 1
  )
}

object MaltAggregate {
  
  // Factory method pour création sécurisée
  def create(
    name: NonEmptyString,
    maltType: MaltType,
    ebcColor: EBCColor,
    extractionRate: ExtractionRate,
    diastaticPower: DiastaticPower,
    originCode: String,
    source: MaltSource,
    description: Option[String] = None,
    flavorProfiles: List[String] = List.empty
  ): MaltAggregate = {
    val now = Instant.now()
    MaltAggregate(
      id = MaltId.generate(),
      name = name,
      maltType = maltType,
      ebcColor = ebcColor,
      extractionRate = extractionRate,
      diastaticPower = diastaticPower,
      originCode = originCode,
      description = description,
      flavorProfiles = flavorProfiles.filter(_.trim.nonEmpty).distinct.take(10),
      source = source,
      isActive = true,
      credibilityScore = if (source == MaltSource.Manual) 1.0 else 0.7,
      createdAt = now,
      updatedAt = now,
      version = 1L
    )
  }
}
