package application.queries.public.malts.handlers

import application.queries.public.malts.{MaltDetailQuery}
import application.queries.public.malts.readmodels.MaltReadModel
import domain.malts.repositories.MaltReadRepository
import domain.malts.model.MaltId
import javax.inject.{Inject, Singleton}
import scala.concurrent.{ExecutionContext, Future}

/**
 * Handler pour les requêtes de détail de malt (API publique)
 */
@Singleton
class MaltDetailQueryHandler @Inject()(
  maltReadRepo: MaltReadRepository
)(implicit ec: ExecutionContext) {

  /**
   * ✅ CORRIGÉ: Retourne Option[MaltReadModel] au lieu de MaltDetailResult
   */
  def handle(query: MaltDetailQuery): Future[Option[MaltReadModel]] = {
    for {
      maltIdResult <- Future.successful(MaltId(query.maltId))
      maltOption <- maltIdResult match {
        case Right(maltId) =>
          maltReadRepo.findById(maltId).map(_.map(MaltReadModel.fromAggregate))
        case Left(_) =>
          Future.successful(None)
      }
    } yield maltOption
  }
}
