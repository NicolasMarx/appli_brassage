# Routes finales nettoyées

# Page d'accueil
GET     /                           controllers.HomeController.index()

# API Publique Hops
GET     /api/v1/hops                interfaces.http.api.v1.hops.HopsController.list(page: Int ?= 0, size: Int ?= 20)
GET     /api/v1/hops/:id            interfaces.http.api.v1.hops.HopsController.detail(id: String)
POST    /api/v1/hops/search         interfaces.http.api.v1.hops.HopsController.search()

# API Admin Hops
GET     /api/admin/hops             controllers.admin.AdminHopsController.list(page: Int ?= 0, size: Int ?= 20)
POST    /api/admin/hops             controllers.admin.AdminHopsController.create()
GET     /api/admin/hops/:id         controllers.admin.AdminHopsController.detail(id: String)
PUT     /api/admin/hops/:id         controllers.admin.AdminHopsController.update(id: String)
DELETE  /api/admin/hops/:id         controllers.admin.AdminHopsController.delete(id: String)

# API Admin Malts  
GET     /api/admin/malts            interfaces.controllers.malts.MaltAdminController.list(page: Int ?= 0, size: Int ?= 20)
POST    /api/admin/malts            interfaces.controllers.malts.MaltAdminController.create()
GET     /api/admin/malts/:id        interfaces.controllers.malts.MaltAdminController.get(id: String)
PUT     /api/admin/malts/:id        interfaces.controllers.malts.MaltAdminController.update(id: String)
DELETE  /api/admin/malts/:id        interfaces.controllers.malts.MaltAdminController.delete(id: String)

# Assets
GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)

# ==============================================================================
# API MALTS - INTERFACE PUBLIQUE
# ==============================================================================

# Liste des malts (publique)
GET     /api/v1/malts                   interfaces.http.api.v1.malts.MaltsController.list(page: Int ?= 0, size: Int ?= 20)
GET     /api/v1/malts/:id               interfaces.http.api.v1.malts.MaltsController.detail(id: String)
POST    /api/v1/malts/search            interfaces.http.api.v1.malts.MaltsController.search()
GET     /api/v1/malts/type/:maltType    interfaces.http.api.v1.malts.MaltsController.byType(maltType: String, page: Int ?= 0, size: Int ?= 20)


# =============================================================================
# Yeast routes
# =============================================================================

# Public API - Levures (lecture seule, pas d'auth)
GET     /api/v1/yeasts                    interfaces.controllers.yeasts.YeastPublicController.listActiveYeasts(page: Int ?= 0, size: Int ?= 20, name: Option[String], laboratory: Option[String], yeastType: Option[String])

# Public API - Endpoints spécifiques (AVANT :yeastId pour éviter les conflits)
GET     /api/v1/yeasts/search             interfaces.controllers.yeasts.YeastPublicController.searchYeasts(q: String, limit: Int ?= 20)
GET     /api/v1/yeasts/stats              interfaces.controllers.yeasts.YeastPublicController.getPublicStats()
GET     /api/v1/yeasts/popular            interfaces.controllers.yeasts.YeastPublicController.getPopularYeasts(limit: Int ?= 10)
GET     /api/v1/yeasts/type/:yeastType    interfaces.controllers.yeasts.YeastPublicController.getYeastsByType(yeastType: String, limit: Int ?= 20)
GET     /api/v1/yeasts/laboratory/:lab    interfaces.controllers.yeasts.YeastPublicController.getYeastsByLaboratory(lab: String, limit: Int ?= 20)

# Public API - Recommandations levures
GET     /api/v1/yeasts/recommendations/beginner     interfaces.controllers.yeasts.YeastPublicController.getBeginnerRecommendations(limit: Int ?= 5)
GET     /api/v1/yeasts/recommendations/seasonal     interfaces.controllers.yeasts.YeastPublicController.getSeasonalRecommendations(season: String ?= "current", limit: Int ?= 8)
GET     /api/v1/yeasts/recommendations/experimental interfaces.controllers.yeasts.YeastPublicController.getExperimentalRecommendations(limit: Int ?= 6)
GET     /api/v1/yeasts/recommendations/style/:style interfaces.controllers.yeasts.YeastPublicController.getRecommendationsForBeerStyle(style: String, targetAbv: Option[Double], fermentationTemp: Option[Int], limit: Int ?= 10)

# Public API - Endpoints avec UUID (APRÈS les endpoints spécifiques)
GET     /api/v1/yeasts/:yeastId           interfaces.controllers.yeasts.YeastPublicController.getYeast(yeastId: String)
GET     /api/v1/yeasts/:yeastId/alternatives  interfaces.controllers.yeasts.YeastPublicController.getAlternatives(yeastId: String, reason: String ?= "unavailable", limit: Int ?= 5)

# Admin API - Levures (authentification requise)
GET     /api/admin/yeasts                 interfaces.controllers.yeasts.YeastAdminController.listYeasts(page: Int ?= 0, size: Int ?= 20, name: Option[String], laboratory: Option[String], yeastType: Option[String], status: Option[String])
POST    /api/admin/yeasts                 interfaces.controllers.yeasts.YeastAdminController.createYeast()
GET     /api/admin/yeasts/stats           interfaces.controllers.yeasts.YeastAdminController.getStatistics()
POST    /api/admin/yeasts/batch           interfaces.controllers.yeasts.YeastAdminController.batchCreate()
GET     /api/admin/yeasts/export          interfaces.controllers.yeasts.YeastAdminController.exportYeasts(format: String ?= "json", status: Option[String])

GET     /api/admin/yeasts/:yeastId        interfaces.controllers.yeasts.YeastAdminController.getYeast(yeastId: String)
PUT     /api/admin/yeasts/:yeastId        interfaces.controllers.yeasts.YeastAdminController.updateYeast(yeastId: String)
DELETE  /api/admin/yeasts/:yeastId        interfaces.controllers.yeasts.YeastAdminController.deleteYeast(yeastId: String)

# Admin API - Actions spécifiques levures
PUT     /api/admin/yeasts/:yeastId/status interfaces.controllers.yeasts.YeastAdminController.changeStatus(yeastId: String)
PUT     /api/admin/yeasts/:yeastId/activate   interfaces.controllers.yeasts.YeastAdminController.activateYeast(yeastId: String)
PUT     /api/admin/yeasts/:yeastId/deactivate interfaces.controllers.yeasts.YeastAdminController.deactivateYeast(yeastId: String)
PUT     /api/admin/yeasts/:yeastId/archive    interfaces.controllers.yeasts.YeastAdminController.archiveYeast(yeastId: String)

# =============================================================================
# API RECIPES - INTERFACE PUBLIQUE COMPLÈTE
# =============================================================================

# Public API - Recherche et découverte de recettes
GET     /api/v1/recipes/search                    interfaces.controllers.recipes.RecipePublicController.searchRecipes()
GET     /api/v1/recipes/discover                  interfaces.controllers.recipes.RecipePublicController.discoverRecipes(category: String ?= "trending", limit: Int ?= 12)

# Public API - Recommandations intelligentes
GET     /api/v1/recipes/recommendations/beginner         interfaces.controllers.recipes.RecipePublicController.getBeginnerRecommendations(maxResults: Int ?= 6)
GET     /api/v1/recipes/recommendations/style/:style     interfaces.controllers.recipes.RecipePublicController.getStyleRecommendations(style: String, difficulty: String ?= "all", maxResults: Int ?= 8)
GET     /api/v1/recipes/recommendations/ingredients      interfaces.controllers.recipes.RecipePublicController.getIngredientBasedRecommendations()
GET     /api/v1/recipes/recommendations/seasonal/:season interfaces.controllers.recipes.RecipePublicController.getSeasonalRecommendations(season: String, maxResults: Int ?= 8)
GET     /api/v1/recipes/recommendations/progression      interfaces.controllers.recipes.RecipePublicController.getProgressionRecommendations(lastRecipeId: String, currentLevel: String ?= "beginner", maxResults: Int ?= 5)

# Public API - Comparaison et analyse
GET     /api/v1/recipes/compare                   interfaces.controllers.recipes.RecipePublicController.compareRecipes(recipeIds: String)
POST    /api/v1/recipes/analyze                   interfaces.controllers.recipes.RecipePublicController.analyzeCustomRecipe()

# Public API - Outils et calculateurs
GET     /api/v1/recipes/:id/scale                 interfaces.controllers.recipes.RecipePublicController.scaleRecipe(id: String, targetBatchSize: Double, targetUnit: String ?= "L")
GET     /api/v1/recipes/:id/brewing-guide         interfaces.controllers.recipes.RecipePublicController.getBrewingGuide(id: String)
GET     /api/v1/recipes/:id/alternatives          interfaces.controllers.recipes.RecipePublicController.getAlternatives(id: String, reason: String ?= "unavailable_ingredients", maxResults: Int ?= 5)

# Public API - Fonctionnalités communautaires
GET     /api/v1/recipes/stats                     interfaces.controllers.recipes.RecipePublicController.getPublicStats()
GET     /api/v1/recipes/collections               interfaces.controllers.recipes.RecipePublicController.getRecipeCollections(category: String ?= "all", page: Int ?= 0, size: Int ?= 20)

# Public API - Santé du service (AVANT :id pour éviter conflit routing)
GET     /api/v1/recipes/health                    interfaces.controllers.recipes.RecipePublicController.health()

# Public API - Endpoints avec ID (APRÈS les endpoints spécifiques pour éviter conflits)
GET     /api/v1/recipes/:id                       interfaces.controllers.recipes.RecipePublicController.getRecipeDetails(id: String)

# =============================================================================
# API RECIPES - ADMIN (authentification requise)
# =============================================================================

# Admin API - Recettes (authentification requise)
GET     /api/admin/recipes                interfaces.controllers.recipes.RecipeAdminController.list(page: Int ?= 0, size: Int ?= 20)
POST    /api/admin/recipes                interfaces.controllers.recipes.RecipeAdminController.create()
GET     /api/admin/recipes/_health        interfaces.controllers.recipes.RecipeAdminController.health()
GET     /api/admin/recipes/:recipeId      interfaces.controllers.recipes.RecipeAdminController.get(recipeId: String)
DELETE  /api/admin/recipes/:recipeId      interfaces.controllers.recipes.RecipeAdminController.delete(recipeId: String)
