GET     /                           controllers.HomeController.index()

GET     /api/v1/hops                controllers.api.v1.hops.HopsController.list(page: Int ?= 0, size: Int ?= 20)
GET     /api/v1/hops/:id            controllers.api.v1.hops.HopsController.detail(id: String)
POST    /api/v1/hops/search         controllers.api.v1.hops.HopsController.search()

GET     /api/admin/hops             controllers.admin.AdminHopsController.list(page: Int ?= 0, size: Int ?= 20)
POST    /api/admin/hops             controllers.admin.AdminHopsController.create()
GET     /api/admin/hops/:id         controllers.admin.AdminHopsController.detail(id: String)
PUT     /api/admin/hops/:id         controllers.admin.AdminHopsController.update(id: String)
DELETE  /api/admin/hops/:id         controllers.admin.AdminHopsController.delete(id: String)

GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)

# Routes √† ajouter dans conf/routes pour le domaine Malts

# =============================================================================
# API PUBLIQUE MALTS (/api/v1/malts)
# =============================================================================

# Liste des malts avec filtres
GET     /api/v1/malts                           controllers.api.v1.malts.MaltsController.list(page: Int ?= 0, pageSize: Int ?= 20, maltType: Option[String] ?= None, minEBC: Option[Double] ?= None, maxEBC: Option[Double] ?= None, originCode: Option[String] ?= None, activeOnly: Boolean ?= true)

# D√©tail d'un malt
GET     /api/v1/malts/:id                       controllers.api.v1.malts.MaltsController.detail(id: String, includeSubstitutes: Boolean ?= false, includeBeerStyles: Boolean ?= false)

# Recherche avanc√©e
POST    /api/v1/malts/search                    controllers.api.v1.malts.MaltsController.search()

# Informations types et couleurs
GET     /api/v1/malts/types                     controllers.api.v1.malts.MaltsController.types()
GET     /api/v1/malts/colors                    controllers.api.v1.malts.MaltsController.colors()

# =============================================================================
# API ADMIN MALTS (/api/admin/malts) - Authentification requise
# =============================================================================

# CRUD complet malts
GET     /api/admin/malts                        controllers.admin.AdminMaltsController.list(page: Int ?= 0, pageSize: Int ?= 20, maltType: Option[String] ?= None, status: Option[String] ?= None, source: Option[String] ?= None, minCredibility: Option[Int] ?= None, needsReview: Boolean ?= false, searchTerm: Option[String] ?= None, sortBy: String ?= "name", sortOrder: String ?= "asc")
POST    /api/admin/malts                        controllers.admin.AdminMaltsController.create()
GET     /api/admin/malts/:id                    controllers.admin.AdminMaltsController.detail(id: String, includeAuditLog: Boolean ?= false, includeSubstitutes: Boolean ?= true, includeBeerStyles: Boolean ?= true, includeStatistics: Boolean ?= false)
PUT     /api/admin/malts/:id                    controllers.admin.AdminMaltsController.update(id: String)
DELETE  /api/admin/malts/:id                    controllers.admin.AdminMaltsController.delete(id: String)

# Fonctionnalit√©s admin avanc√©es
GET     /api/admin/malts/statistics             controllers.admin.AdminMaltsController.statistics()
GET     /api/admin/malts/needs-review           controllers.admin.AdminMaltsController.needsReview(page: Int ?= 0, pageSize: Int ?= 20, maxCredibility: Int ?= 70)
PATCH   /api/admin/malts/:id/credibility        controllers.admin.AdminMaltsController.adjustCredibility(id: String)
POST    /api/admin/malts/batch-import           controllers.admin.AdminMaltsController.batchImport()


# =============================================================================
# ROUTES MALTS CORRIG√âES
# =============================================================================

# API v1 Malts (publique)
GET     /api/v1/malts                           controllers.api.v1.malts.MaltsController.list(page: Int ?= 0, pageSize: Int ?= 20, maltType: Option[String] ?= None, minEBC: Option[Double] ?= None, maxEBC: Option[Double] ?= None, originCode: Option[String] ?= None, activeOnly: Boolean ?= true)
GET     /api/v1/malts/:id                       controllers.api.v1.malts.MaltsController.detail(id: String, includeSubstitutes: Boolean ?= false, includeBeerStyles: Boolean ?= false)
POST    /api/v1/malts/search                    controllers.api.v1.malts.MaltsController.search()
GET     /api/v1/malts/types                     controllers.api.v1.malts.MaltsController.types()
GET     /api/v1/malts/colors                    controllers.api.v1.malts.MaltsController.colors()

# API Admin Malts (s√©curis√©e)
GET     /api/admin/malts                        controllers.admin.AdminMaltsController.list(page: Int ?= 0, pageSize: Int ?= 20, maltType: Option[String] ?= None, status: Option[String] ?= None, source: Option[String] ?= None, minCredibility: Option[Int] ?= None, needsReview: Boolean ?= false, searchTerm: Option[String] ?= None, sortBy: String ?= "name", sortOrder: String ?= "asc")
POST    /api/admin/malts                        controllers.admin.AdminMaltsController.create()
GET     /api/admin/malts/:id                    controllers.admin.AdminMaltsController.detail(id: String, includeAuditLog: Boolean ?= false, includeSubstitutes: Boolean ?= true, includeBeerStyles: Boolean ?= true, includeStatistics: Boolean ?= false)
PUT     /api/admin/malts/:id                    controllers.admin.AdminMaltsController.update(id: String)
DELETE  /api/admin/malts/:id                    controllers.admin.AdminMaltsController.delete(id: String)
GET     /api/admin/malts/statistics             controllers.admin.AdminMaltsController.statistics()
GET     /api/admin/malts/needs-review           controllers.admin.AdminMaltsController.needsReview(page: Int ?= 0, pageSize: Int ?= 20, maxCredibility: Int ?= 70)
PATCH   /api/admin/malts/:id/credibility        controllers.admin.AdminMaltsController.adjustCredibility(id: String)
POST    /api/admin/malts/batch-import           controllers.admin.AdminMaltsController.batchImport()


# ============================================================================
# üåæ ROUTES MALTS - VERSION SIMPLIFI√âE POUR MVP
# ============================================================================

# Routes Admin Malts (simplifi√©es pour correspondre aux m√©thodes existantes)
GET     /api/admin/malts                        controllers.admin.AdminMaltsController.getAllMaltsDefault()
GET     /api/admin/malts/paginated              controllers.admin.AdminMaltsController.getAllMalts(page: Int ?= 0, pageSize: Int ?= 20, activeOnly: Boolean ?= false)
GET     /api/admin/malts/search                 controllers.admin.AdminMaltsController.searchMalts(query: String, page: Int ?= 0, pageSize: Int ?= 20)

# Routes publiques Malts (placeholder pour futur d√©veloppement)
# GET     /api/v1/malts                         controllers.MaltsController.getAllMalts(page: Int ?= 0, pageSize: Int ?= 20)
# GET     /api/v1/malts/search                  controllers.MaltsController.searchMalts(query: String, page: Int ?= 0, pageSize: Int ?= 20)

