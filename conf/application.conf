# =============================================================================
# CONFIGURATION ARCHITECTURE DDD/CQRS AVEC IA DE VEILLE
# =============================================================================

# Configuration Play Framework
play {
  # Modules personnalisés pour injection dépendances
  modules {
    #enabled += "modules.CoreModule"
   # enabled += "modules.PersistenceModule"
   # enabled += "modules.ApplicationModule"
   # enabled += "modules.SecurityModule"
   # enabled += "modules.AiMonitoringModule"
  }
  
  # Configuration sécurité
  http {
    secret.key = "changeme-in-production-this-is-not-secure"
    session.cookieName = "BREWING_ADMIN_SESSION"
    session.maxAge = 3600000  # 1 heure
  }
  
  # Filtres sécurité
  filters {
    enabled += "play.filters.csrf.CSRFFilter"
    enabled += "play.filters.headers.SecurityHeadersFilter"
    enabled += "play.filters.hosts.AllowedHostsFilter"
  }
  
  # Configuration CSRF
  filters.csrf {
    header.bypassHeaders {
      X-Requested-With = "*"
      Csrf-Token = "nocheck"
    }
  }
}

# =============================================================================
# BASE DE DONNÉES POSTGRESQL
# =============================================================================
slick.dbs.default {
  profile = "slick.jdbc.PostgresProfile$"
  db {
    driver = "org.postgresql.Driver"
    url = "jdbc:postgresql://localhost:5432/appli_brassage"
    user = "postgres"
    password = "postgres"
    
    # Pool de connexions
    connectionPool = "HikariCP"
    maximumPoolSize = 10
    minimumIdle = 5
    connectionTimeout = 30000
    idleTimeout = 600000
    maxLifetime = 1800000
  }
}

# Configuration évolutions base de données
play.evolutions.db.default.autoApply = true
play.evolutions.db.default.autoApplyDowns = false

# =============================================================================
# CONFIGURATION IA DE VEILLE
# =============================================================================
ai.monitoring {
  # Configuration OpenAI
  openai {
    api.key = "sk-your-openai-key-here"
    model = "gpt-4"
    max.tokens = 2000
    temperature = 0.3
  }
  
  # Configuration Anthropic
  anthropic {
    api.key = "your-anthropic-key-here"
    model = "claude-3-sonnet-20240229"
    max.tokens = 2000
  }
  
  # Configuration découverte
  discovery {
    enabled = true
    schedule.cron = "0 0 6 * * ?" # Tous les jours à 6h
    sources {
      hops = [
        "https://www.yakimachief.com/hops",
        "https://www.barthhaas.com/hop-varieties",
        "https://www.hopunion.com/hop-varieties"
      ]
    }
    
    # Limites et sécurité
    rate.limit.per.minute = 10
    confidence.threshold = 70
    max.proposals.per.day = 50
  }
  
  # Configuration scraping web
  scraping {
    user.agent = "BrewingPlatform-AI/1.0 (+https://yoursite.com/bot)"
    delay.between.requests = 2000  # 2 secondes
    timeout = 30000  # 30 secondes
    respect.robots.txt = true
  }
}

# =============================================================================
# CONFIGURATION SÉCURITÉ
# =============================================================================
security {
  # Configuration admin
  admin {
    session.timeout = 3600000  # 1 heure
    max.login.attempts = 5
    lockout.duration = 900000  # 15 minutes
  }
  
  # Rate limiting
  rate.limiting {
    enabled = true
    api.public.requests.per.minute = 100
    api.admin.requests.per.minute = 200
  }
  
  # Configuration audit
  audit {
    enabled = true
    retention.days = 365
    sensitive.fields = ["password", "email", "ip"]
  }
}

# =============================================================================
# CONFIGURATION CACHE ET PERFORMANCE  
# =============================================================================
cache {
  # Cache référentiels (styles, origines, arômes)
  referentials.ttl = 3600  # 1 heure
  
  # Cache houblons/ingrédients 
  ingredients.ttl = 1800   # 30 minutes
  
  # Cache propositions IA
  proposals.ttl = 300      # 5 minutes
}

# =============================================================================
# CONFIGURATION LOGGING
# =============================================================================
logger {
  root = WARN
  play = INFO
  application = DEBUG
  
  # Loggers spécialisés
  ai.monitoring = DEBUG
  security = INFO
  audit = INFO
  slick = INFO
}

# =========================
# My-brew-app-V2 (Play 2.9)
# =========================

# --- Modules
play.modules.enabled += "modules.BindingsModule"
play.modules.enabled += "play.api.db.slick.SlickModule"

# --- Filtres & Sécurité
play.filters.enabled += "play.filters.gzip.GzipFilter"
play.filters.enabled += "play.filters.headers.SecurityHeadersFilter"

# ⚠️ CSP en UNE SEULE LIGNE (pas de triple quotes)
play.filters.headers.contentSecurityPolicy = "default-src 'self'; img-src 'self' data:; style-src 'self' 'unsafe-inline'; script-src 'self'; font-src 'self' data:; connect-src 'self'; frame-ancestors 'self'; base-uri 'self'; form-action 'self'"

# Hôtes (dev). En prod, remplace par ton FQDN.
play.filters.hosts.allowed = ["."]
# ex prod :
# play.filters.hosts.allowed = ["hopfinder.example.com"]

# --- DB (Slick + Hikari)
slick.dbs.default.profile = "slick.jdbc.PostgresProfile$"

# Valeurs par défaut (dev local)
slick.dbs.default.db {
  driver    = "org.postgresql.Driver"
  url       = "jdbc:postgresql://localhost:5432/appli_brassage"
  user      = "postgres"
  password  = "postgres"
  numThreads = 16
  queueSize  = 1024
  connectionTimeout = 30000
}

# Configuration du pool de connexions
slick.dbs.default.db.maxConnections = 20
slick.dbs.default.db.minConnections = 5
slick.dbs.default.db.numThreads = 10     # ← DOIT être <= maxConnections (20)
slick.dbs.default.db.queueSize = 1000    # ← Si > 0, alors numThreads <= maxConnections
slick.dbs.default.db.maxLifetime = 30 minutes
slick.dbs.default.db.keepAliveConnection = true

# Overrides optionnels par variables d'environnement (si présentes)
slick.dbs.default.db.driver   = ${?DB_DRIVER}
slick.dbs.default.db.url      = ${?JDBC_DATABASE_URL}
slick.dbs.default.db.user     = ${?DB_USER}
slick.dbs.default.db.password = ${?DB_PASSWORD}

# --- Evolutions
play.evolutions.enabled   = true
play.evolutions.autoApply = true

# --- Divers
play.http.parser.maxMemoryBuffer = 512k
play.i18n.langs = ["fr"]

logger.root        = INFO
logger.play        = INFO
logger.application = INFO

# Secret (dev) ; en prod, injecte via PLAY_SECRET (≥ 256 bits)
play.http.secret.key = "NPsX>5[m/R<=NYzqPwTQ78ZS9Mle?:oPAFpyIz<6?FaTy7m1S[5P@YBzMg@Ok=IU"
play.http.secret.key = ${?PLAY_SECRET}

# Exonérer les endpoints JSON de l'API des vérifs CSRF (POST/PATCH/DELETE)
play.filters.csrf {
  bypass {
    routes = [
      { method = "POST",   path = "/api/.*" }
      { method = "PUT",    path = "/api/.*" }
      { method = "PATCH",  path = "/api/.*" }
      { method = "DELETE", path = "/api/.*" }
    ]
  }
}

logger.slick.jdbc.JdbcBackend.statement=DEBUG