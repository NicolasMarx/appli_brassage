#!/bin/bash

# =============================================================================
# DIAGNOSTIC APPROFONDI POSTGRESQL
# =============================================================================

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üî¨ Diagnostic approfondi PostgreSQL${NC}"
echo ""

# Test 1: Connexion depuis l'int√©rieur du container
echo -e "${BLUE}üß™ Test 1: Connexion interne au container${NC}"
if docker-compose exec postgres psql -U postgres -c "\l" > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Connexion interne OK${NC}"
    
    # Lister les bases de donn√©es
    echo "üìã Bases de donn√©es disponibles:"
    docker-compose exec postgres psql -U postgres -c "\l" | grep -E "(Name|----|\s+appli_|postgres)" | head -10
    
    # V√©rifier si la base appli_brassage existe
    DB_EXISTS=$(docker-compose exec postgres psql -U postgres -t -c "SELECT 1 FROM pg_database WHERE datname = 'appli_brassage';" | xargs)
    if [ "$DB_EXISTS" = "1" ]; then
        echo -e "${GREEN}‚úÖ Base 'appli_brassage' existe${NC}"
        
        # Test connexion √† cette base
        if docker-compose exec postgres psql -U postgres -d appli_brassage -c "SELECT current_database();" > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Connexion √† 'appli_brassage' OK${NC}"
        else
            echo -e "${RED}‚ùå Connexion √† 'appli_brassage' √©choue${NC}"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Base 'appli_brassage' n'existe pas${NC}"
        
        # Cr√©er la base
        echo "üîß Cr√©ation de la base 'appli_brassage'..."
        docker-compose exec postgres psql -U postgres -c "CREATE DATABASE appli_brassage;" || echo "Erreur cr√©ation base"
    fi
else
    echo -e "${RED}‚ùå Connexion interne √©choue${NC}"
    
    # V√©rifier les logs PostgreSQL
    echo "üìã Logs PostgreSQL (derni√®res lignes):"
    docker-compose logs postgres | tail -20
fi

echo ""

# Test 2: Configuration PostgreSQL interne
echo -e "${BLUE}üß™ Test 2: Configuration PostgreSQL${NC}"

# V√©rifier pg_hba.conf (authentification)
echo "üìã Configuration authentification (pg_hba.conf):"
if docker-compose exec postgres cat /var/lib/postgresql/data/pg_hba.conf | grep -v "^#" | grep -v "^$"; then
    echo -e "${GREEN}‚úÖ pg_hba.conf accessible${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  pg_hba.conf non accessible${NC}"
fi

# V√©rifier postgresql.conf
echo ""
echo "üìã Configuration √©coute (postgresql.conf):"
LISTEN_CONFIG=$(docker-compose exec postgres grep "listen_addresses" /var/lib/postgresql/data/postgresql.conf || echo "non trouv√©")
echo "Listen addresses: $LISTEN_CONFIG"

echo ""

# Test 3: Connexion r√©seau depuis l'h√¥te
echo -e "${BLUE}üß™ Test 3: Connexion r√©seau depuis l'h√¥te${NC}"

# V√©rifier que le port est ouvert
if nc -z localhost 5432; then
    echo -e "${GREEN}‚úÖ Port 5432 accessible${NC}"
else
    echo -e "${RED}‚ùå Port 5432 non accessible${NC}"
fi

# Test avec psql depuis l'h√¥te (si install√©)
if command -v psql > /dev/null; then
    echo "üîß Test psql depuis l'h√¥te..."
    if PGPASSWORD=postgres psql -h localhost -U postgres -d appli_brassage -c "SELECT 'Host connection OK';" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Connexion depuis l'h√¥te OK${NC}"
    else
        echo -e "${RED}‚ùå Connexion depuis l'h√¥te √©choue${NC}"
        
        # Essayer sur la base postgres
        if PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "SELECT 'Host connection OK';" > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Connexion √† 'postgres' depuis l'h√¥te OK${NC}"
        else
            echo -e "${RED}‚ùå Connexion √† 'postgres' depuis l'h√¥te √©choue aussi${NC}"
        fi
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  psql non install√© sur l'h√¥te, test impossible${NC}"
fi

echo ""

# Test 4: V√©rification variables d'environnement
echo -e "${BLUE}üß™ Test 4: Variables d'environnement container${NC}"
echo "üìã Variables PostgreSQL dans le container:"
docker-compose exec postgres env | grep "POSTGRES" || echo "Aucune variable POSTGRES trouv√©e"

echo ""

# Test 5: Processus PostgreSQL
echo -e "${BLUE}üß™ Test 5: Processus PostgreSQL${NC}"
echo "üìã Processus postgres dans le container:"
docker-compose exec postgres ps aux | grep postgres | head -5

echo ""

# Test 6: Reconstruction compl√®te
echo -e "${BLUE}üîß Solution: Reconstruction compl√®te PostgreSQL${NC}"
echo ""
echo -e "${YELLOW}Cette solution va:${NC}"
echo "   1. Arr√™ter compl√®tement PostgreSQL"
echo "   2. Supprimer les donn√©es existantes"
echo "   3. Red√©marrer avec une base propre"
echo ""
read -p "Voulez-vous proc√©der ? (y/N) " -r
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo ""
    echo -e "${BLUE}üîÑ Reconstruction PostgreSQL...${NC}"
    
    # Arr√™ter les services
    echo "üõë Arr√™t des services..."
    docker-compose down
    
    # Supprimer les volumes
    echo "üóëÔ∏è  Suppression des volumes PostgreSQL..."
    docker volume rm my-brew-app-v2_postgres_data 2>/dev/null || true
    
    # Red√©marrer
    echo "üöÄ Red√©marrage avec base propre..."
    docker-compose up -d postgres
    
    # Attendre le d√©marrage
    echo "‚è≥ Attente d√©marrage PostgreSQL..."
    for i in {1..30}; do
        if docker-compose exec postgres pg_isready -U postgres > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ PostgreSQL red√©marr√© apr√®s ${i}s${NC}"
            break
        fi
        sleep 1
    done
    
    # Cr√©er la base appli_brassage
    echo "üèóÔ∏è  Cr√©ation base 'appli_brassage'..."
    docker-compose exec postgres psql -U postgres -c "CREATE DATABASE appli_brassage;" 2>/dev/null || echo "Base d√©j√† existante"
    
    # Test final
    if docker-compose exec postgres psql -U postgres -d appli_brassage -c "SELECT 'Reconstruction r√©ussie' as status;" > /dev/null 2>&1; then
        echo -e "${GREEN}üéâ Reconstruction PostgreSQL r√©ussie !${NC}"
        echo ""
        echo -e "${GREEN}Vous pouvez maintenant relancer:${NC}"
        echo "   sbt run"
    else
        echo -e "${RED}‚ùå Reconstruction √©chou√©e${NC}"
    fi
    
    # Red√©marrer Redis aussi
    docker-compose up -d redis
else
    echo ""
    echo -e "${BLUE}üí° Alternatives √† essayer:${NC}"
    echo ""
    echo "1. V√©rifier les logs d√©taill√©s:"
    echo "   docker-compose logs postgres | tail -50"
    echo ""
    echo "2. Se connecter au container pour debug:"
    echo "   docker-compose exec postgres bash"
    echo "   psql -U postgres"
    echo ""
    echo "3. Utiliser une base de donn√©es diff√©rente temporairement:"
    echo "   Modifier application.conf pour pointer vers 'postgres' au lieu de 'appli_brassage'"
fi