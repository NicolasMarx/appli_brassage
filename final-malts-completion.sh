#!/bin/bash

# =============================================================================
# SCRIPT FINAL - COMPL√âTION APIs MALTS 
# =============================================================================
# Compl√®te uniquement ce qui manque sur votre branche feature/malts-domain
# Bas√© sur l'audit de votre structure existante
# =============================================================================

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${BLUE}üéØ COMPL√âTION FINALE APIs MALTS${NC}"
echo -e "${BLUE}==============================${NC}"

# =============================================================================
# √âTAPE 1 : CR√âATION DES QUERIES PUBLIQUES MANQUANTES
# =============================================================================

echo -e "\n${YELLOW}üìã √âTAPE 1 : Cr√©ation des Queries publiques${NC}"

# Cr√©er les dossiers manquants
mkdir -p app/application/queries/public/malts/{handlers,readmodels}

# MaltListQuery
cat > app/application/queries/public/malts/MaltListQuery.scala << 'EOF'
package application.queries.public.malts

import domain.malts.model.MaltType

case class MaltListQuery(
  maltType: Option[MaltType] = None,
  page: Int = 0,
  size: Int = 20
)
EOF

# MaltDetailQuery
cat > app/application/queries/public/malts/MaltDetailQuery.scala << 'EOF'
package application.queries.public.malts

case class MaltDetailQuery(
  maltId: String
)
EOF

# MaltSearchQuery
cat > app/application/queries/public/malts/MaltSearchQuery.scala << 'EOF'
package application.queries.public.malts

import domain.malts.model.MaltType

case class MaltSearchQuery(
  name: Option[String] = None,
  maltType: Option[MaltType] = None,
  minEbc: Option[Double] = None,
  maxEbc: Option[Double] = None,
  minExtraction: Option[Double] = None,
  maxExtraction: Option[Double] = None,
  page: Int = 0,
  size: Int = 20
)
EOF

echo -e "‚úÖ ${GREEN}Queries cr√©√©es${NC}"

# =============================================================================
# √âTAPE 2 : CR√âATION DES READMODELS
# =============================================================================

echo -e "\n${YELLOW}üìã √âTAPE 2 : Cr√©ation des ReadModels${NC}"

# MaltReadModel
cat > app/application/queries/public/malts/readmodels/MaltReadModel.scala << 'EOF'
package application.queries.public.malts.readmodels

import domain.malts.model.MaltAggregate
import play.api.libs.json._

case class MaltReadModel(
  id: String,
  name: String,
  maltType: String,
  ebcColor: Double,
  extractionRate: Double,
  diastaticPower: Double,
  originCode: String,
  description: Option[String],
  flavorProfiles: List[String],
  isActive: Boolean
)

object MaltReadModel {
  
  def fromAggregate(malt: MaltAggregate): MaltReadModel = {
    MaltReadModel(
      id = malt.id.value,
      name = malt.name.value,
      maltType = malt.maltType.name,
      ebcColor = malt.ebcColor.value,
      extractionRate = malt.extractionRate.value,
      diastaticPower = malt.diastaticPower.value,
      originCode = malt.originCode,
      description = malt.description,
      flavorProfiles = malt.flavorProfiles,
      isActive = malt.isActive
    )
  }
  
  implicit val format: Format[MaltReadModel] = Json.format[MaltReadModel]
}

case class MaltListResponse(
  malts: List[MaltReadModel],
  totalCount: Long,
  page: Int,
  size: Int,
  hasNext: Boolean
)

object MaltListResponse {
  
  def create(
    malts: List[MaltReadModel],
    totalCount: Long,
    page: Int,
    size: Int
  ): MaltListResponse = {
    MaltListResponse(
      malts = malts,
      totalCount = totalCount,
      page = page,
      size = size,
      hasNext = (page + 1) * size < totalCount
    )
  }
  
  implicit val format: Format[MaltListResponse] = Json.format[MaltListResponse]
}
EOF

echo -e "‚úÖ ${GREEN}ReadModels cr√©√©s${NC}"

# =============================================================================
# √âTAPE 3 : CR√âATION DES HANDLERS PUBLIQUES
# =============================================================================

echo -e "\n${YELLOW}üîß √âTAPE 3 : Cr√©ation des Handlers publiques${NC}"

# MaltListQueryHandler
cat > app/application/queries/public/malts/handlers/MaltListQueryHandler.scala << 'EOF'
package application.queries.public.malts.handlers

import application.queries.public.malts.MaltListQuery
import application.queries.public.malts.readmodels.{MaltReadModel, MaltListResponse}
import domain.malts.repositories.MaltReadRepository

import javax.inject.{Inject, Singleton}
import scala.concurrent.{ExecutionContext, Future}
import scala.util.{Try, Success, Failure}

@Singleton
class MaltListQueryHandler @Inject()(
    maltReadRepository: MaltReadRepository
)(implicit ec: ExecutionContext) {

  def handle(query: MaltListQuery): Future[Try[MaltListResponse]] = {
    println(s"üîç MaltListQueryHandler - page: ${query.page}, size: ${query.size}, type: ${query.maltType.map(_.name)}")
    
    val repositoryCall = query.maltType match {
      case Some(maltType) => 
        println(s"üîç Recherche par type: ${maltType.name}")
        maltReadRepository.findByType(maltType, query.page, query.size)
      case None => 
        println(s"üîç Recherche tous malts actifs")
        maltReadRepository.findActive(query.page, query.size)
    }
    
    repositoryCall.map { case (malts, totalCount) =>
      try {
        println(s"üìä Repository retourn√©: ${malts.length} malts, total: $totalCount")
        val maltReadModels = malts.map(MaltReadModel.fromAggregate)
        val response = MaltListResponse.create(
          malts = maltReadModels,
          totalCount = totalCount,
          page = query.page,
          size = query.size
        )
        println(s"‚úÖ Response cr√©√©: ${response.malts.length} malts dans la r√©ponse")
        Success(response)
      } catch {
        case ex: Exception =>
          println(s"‚ùå Erreur dans MaltListQueryHandler: ${ex.getMessage}")
          ex.printStackTrace()
          Failure(ex)
      }
    }.recover {
      case ex: Exception =>
        println(s"‚ùå Erreur fatale dans MaltListQueryHandler: ${ex.getMessage}")
        ex.printStackTrace()
        Failure(ex)
    }
  }
}
EOF

# MaltDetailQueryHandler
cat > app/application/queries/public/malts/handlers/MaltDetailQueryHandler.scala << 'EOF'
package application.queries.public.malts.handlers

import application.queries.public.malts.MaltDetailQuery
import application.queries.public.malts.readmodels.MaltReadModel
import domain.malts.model.MaltId
import domain.malts.repositories.MaltReadRepository

import javax.inject.{Inject, Singleton}
import scala.concurrent.{ExecutionContext, Future}
import scala.util.{Try, Success, Failure}

@Singleton
class MaltDetailQueryHandler @Inject()(
    maltReadRepository: MaltReadRepository
)(implicit ec: ExecutionContext) {

  def handle(query: MaltDetailQuery): Future[Try[Option[MaltReadModel]]] = {
    println(s"üîç MaltDetailQueryHandler - ID: ${query.maltId}")
    
    MaltId(query.maltId) match {
      case Right(maltId) =>
        println(s"üîç MaltId valid√©, recherche en cours...")
        maltReadRepository.byId(maltId).map { maltOpt =>
          try {
            val readModelOpt = maltOpt.map { malt =>
              println(s"‚úÖ Malt trouv√©: ${malt.name.value}")
              MaltReadModel.fromAggregate(malt)
            }
            if (readModelOpt.isEmpty) {
              println(s"‚ö†Ô∏è Aucun malt trouv√© pour l'ID: ${query.maltId}")
            }
            Success(readModelOpt)
          } catch {
            case ex: Exception =>
              println(s"‚ùå Erreur lors de la conversion: ${ex.getMessage}")
              ex.printStackTrace()
              Failure(ex)
          }
        }.recover {
          case ex: Exception => 
            println(s"‚ùå Erreur repository: ${ex.getMessage}")
            ex.printStackTrace()
            Failure(ex)
        }
      
      case Left(error) =>
        println(s"‚ùå MaltId invalide: $error")
        Future.successful(Failure(new IllegalArgumentException(error)))
    }
  }
}
EOF

# MaltSearchQueryHandler
cat > app/application/queries/public/malts/handlers/MaltSearchQueryHandler.scala << 'EOF'
package application.queries.public.malts.handlers

import application.queries.public.malts.MaltSearchQuery
import application.queries.public.malts.readmodels.{MaltReadModel, MaltListResponse}
import domain.malts.repositories.MaltReadRepository

import javax.inject.{Inject, Singleton}
import scala.concurrent.{ExecutionContext, Future}
import scala.util.{Try, Success, Failure}

@Singleton
class MaltSearchQueryHandler @Inject()(
    maltReadRepository: MaltReadRepository
)(implicit ec: ExecutionContext) {

  def handle(query: MaltSearchQuery): Future[Try[MaltListResponse]] = {
    println(s"üîç MaltSearchQueryHandler - name: ${query.name}, type: ${query.maltType.map(_.name)}")
    
    maltReadRepository.search(
      name = query.name,
      maltType = query.maltType,
      minEbc = query.minEbc,
      maxEbc = query.maxEbc,
      minExtraction = query.minExtraction,
      maxExtraction = query.maxExtraction,
      page = query.page,
      size = query.size
    ).map { case (malts, totalCount) =>
      try {
        println(s"üìä Recherche retourn√©: ${malts.length} malts, total: $totalCount")
        val maltReadModels = malts.map(MaltReadModel.fromAggregate)
        val response = MaltListResponse.create(
          malts = maltReadModels,
          totalCount = totalCount,
          page = query.page,
          size = query.size
        )
        Success(response)
      } catch {
        case ex: Exception =>
          println(s"‚ùå Erreur dans MaltSearchQueryHandler: ${ex.getMessage}")
          ex.printStackTrace()
          Failure(ex)
      }
    }.recover {
      case ex: Exception =>
        println(s"‚ùå Erreur fatale dans MaltSearchQueryHandler: ${ex.getMessage}")
        ex.printStackTrace()
        Failure(ex)
    }
  }
}
EOF

echo -e "‚úÖ ${GREEN}Handlers publiques cr√©√©s${NC}"

# =============================================================================
# √âTAPE 4 : AM√âLIORATION DE L'API PUBLIQUE EXISTANTE
# =============================================================================

echo -e "\n${YELLOW}üîß √âTAPE 4 : Am√©lioration de l'API publique${NC}"

# Remplacer le MaltsController existant par une version compl√®te
cat > app/interfaces/http/api/v1/malts/MaltsController.scala << 'EOF'
package interfaces.http.api.v1.malts

import application.queries.public.malts._
import application.queries.public.malts.handlers._
import application.queries.public.malts.readmodels.MaltReadModel
import domain.malts.model.MaltType
import play.api.libs.json._
import play.api.mvc._

import javax.inject.{Inject, Singleton}
import scala.concurrent.{ExecutionContext, Future}
import scala.util.{Failure, Success}

@Singleton
class MaltsController @Inject()(
    cc: ControllerComponents,
    maltListQueryHandler: MaltListQueryHandler,
    maltDetailQueryHandler: MaltDetailQueryHandler,
    maltSearchQueryHandler: MaltSearchQueryHandler
)(implicit ec: ExecutionContext) extends AbstractController(cc) {

  // ===============================
  // LISTE DES MALTS (PUBLIQUE)
  // ===============================
  
  def list(page: Int, size: Int): Action[AnyContent] = Action.async { implicit request =>
    println(s"üåæ GET /api/v1/malts - page: $page, size: $size")
    
    val query = MaltListQuery(page = page, size = size)
    
    maltListQueryHandler.handle(query).map { result =>
      result match {
        case Success(response) =>
          println(s"‚úÖ API publique - Malts r√©cup√©r√©s: ${response.malts.length}/${response.totalCount}")
          Ok(Json.toJson(response))
        case Failure(ex) =>
          println(s"‚ùå Erreur API publique lors de la r√©cup√©ration des malts: ${ex.getMessage}")
          ex.printStackTrace()
          InternalServerError(Json.obj(
            "error" -> "internal_error",
            "message" -> "Une erreur interne s'est produite",
            "details" -> ex.getMessage
          ))
      }
    }.recover {
      case ex =>
        println(s"‚ùå Erreur critique dans list API publique: ${ex.getMessage}")
        ex.printStackTrace()
        InternalServerError(Json.obj(
          "error" -> "critical_error",
          "message" -> "Erreur critique du serveur"
        ))
    }
  }

  // ===============================
  // D√âTAIL D'UN MALT
  // ===============================
  
  def detail(id: String): Action[AnyContent] = Action.async { implicit request =>
    println(s"üåæ GET /api/v1/malts/$id")
    
    val query = MaltDetailQuery(maltId = id)
    
    maltDetailQueryHandler.handle(query).map { result =>
      result match {
        case Success(Some(malt)) =>
          println(s"‚úÖ API publique - Malt trouv√©: ${malt.name}")
          Ok(Json.toJson(malt))
        case Success(None) =>
          println(s"‚ö†Ô∏è API publique - Malt non trouv√©: $id")
          NotFound(Json.obj(
            "error" -> "malt_not_found",
            "message" -> s"Malt avec l'ID '$id' non trouv√©"
          ))
        case Failure(ex) =>
          println(s"‚ùå Erreur API publique lors de la r√©cup√©ration du malt $id: ${ex.getMessage}")
          ex.printStackTrace()
          InternalServerError(Json.obj(
            "error" -> "internal_error",
            "message" -> "Une erreur interne s'est produite",
            "details" -> ex.getMessage
          ))
      }
    }.recover {
      case ex =>
        println(s"‚ùå Erreur critique dans detail API publique: ${ex.getMessage}")
        BadRequest(Json.obj(
          "error" -> "invalid_id",
          "message" -> "ID de malt invalide"
        ))
    }
  }

  // ===============================
  // RECHERCHE AVANC√âE DE MALTS
  // ===============================
  
  def search(): Action[JsValue] = Action.async(parse.json) { implicit request =>
    println(s"üåæ POST /api/v1/malts/search")
    println(s"üîç Body re√ßu: ${Json.prettyPrint(request.body)}")
    
    request.body.validate[MaltSearchRequest] match {
      case JsSuccess(searchRequest, _) =>
        println(s"‚úÖ Requ√™te de recherche valid√©e: ${searchRequest}")
        
        val query = MaltSearchQuery(
          name = searchRequest.name,
          maltType = searchRequest.maltType.flatMap(MaltType.fromName),
          minEbc = searchRequest.minEbc,
          maxEbc = searchRequest.maxEbc,
          minExtraction = searchRequest.minExtraction,
          maxExtraction = searchRequest.maxExtraction,
          page = searchRequest.page.getOrElse(0),
          size = searchRequest.size.getOrElse(20)
        )

        maltSearchQueryHandler.handle(query).map { result =>
          result match {
            case Success(response) =>
              println(s"‚úÖ API publique - Recherche r√©ussie: ${response.malts.length} malts trouv√©s")
              Ok(Json.toJson(response))
            case Failure(ex) =>
              println(s"‚ùå Erreur API publique lors de la recherche: ${ex.getMessage}")
              ex.printStackTrace()
              InternalServerError(Json.obj(
                "error" -> "search_error",
                "message" -> "Erreur lors de la recherche",
                "details" -> ex.getMessage
              ))
          }
        }

      case JsError(errors) =>
        println(s"‚ùå Validation JSON √©chou√©e: $errors")
        Future.successful(BadRequest(Json.obj(
          "error" -> "validation_error",
          "message" -> "Format de requ√™te invalide",
          "details" -> JsError.toJson(errors)
        )))
    }
  }

  // ===============================
  // MALTS PAR TYPE
  // ===============================
  
  def byType(maltType: String, page: Int, size: Int): Action[AnyContent] = Action.async { implicit request =>
    println(s"üåæ GET /api/v1/malts/type/$maltType - page: $page, size: $size")
    
    MaltType.fromName(maltType) match {
      case Some(validType) =>
        val query = MaltListQuery(
          maltType = Some(validType),
          page = page,
          size = size
        )
        
        maltListQueryHandler.handle(query).map { result =>
          result match {
            case Success(response) =>
              println(s"‚úÖ API publique - Malts de type $maltType r√©cup√©r√©s: ${response.malts.length}")
              Ok(Json.toJson(response))
            case Failure(ex) =>
              println(s"‚ùå Erreur API publique lors de la r√©cup√©ration des malts de type $maltType: ${ex.getMessage}")
              InternalServerError(Json.obj(
                "error" -> "internal_error",
                "message" -> "Une erreur interne s'est produite"
              ))
          }
        }
        
      case None =>
        println(s"‚ùå Type de malt invalide: $maltType")
        Future.successful(BadRequest(Json.obj(
          "error" -> "invalid_type",
          "message" -> s"Type de malt '$maltType' invalide",
          "validTypes" -> MaltType.values.map(_.name)
        )))
    }
  }
}

// ===============================
// DTO POUR RECHERCHE
// ===============================

case class MaltSearchRequest(
  name: Option[String] = None,
  maltType: Option[String] = None,
  minEbc: Option[Double] = None,
  maxEbc: Option[Double] = None,
  minExtraction: Option[Double] = None,
  maxExtraction: Option[Double] = None,
  page: Option[Int] = None,
  size: Option[Int] = None
)

object MaltSearchRequest {
  implicit val format: Format[MaltSearchRequest] = Json.format[MaltSearchRequest]
}
EOF

echo -e "‚úÖ ${GREEN}API publique Malts compl√©t√©e${NC}"

# =============================================================================
# √âTAPE 5 : AJOUT DES ROUTES DANS conf/routes
# =============================================================================

echo -e "\n${YELLOW}üîß √âTAPE 5 : Ajout des routes APIs Malts${NC}"

# V√©rifier si les routes malts existent d√©j√†
if ! grep -q "api/v1/malts" conf/routes 2>/dev/null; then
    echo -e "\n# ==============================================================================" >> conf/routes
    echo "# API MALTS - INTERFACE PUBLIQUE" >> conf/routes
    echo "# ==============================================================================" >> conf/routes
    echo "" >> conf/routes
    echo "# Liste des malts (publique)" >> conf/routes
    echo "GET     /api/v1/malts                   interfaces.http.api.v1.malts.MaltsController.list(page: Int ?= 0, size: Int ?= 20)" >> conf/routes
    echo "GET     /api/v1/malts/:id               interfaces.http.api.v1.malts.MaltsController.detail(id: String)" >> conf/routes
    echo "POST    /api/v1/malts/search            interfaces.http.api.v1.malts.MaltsController.search()" >> conf/routes
    echo "GET     /api/v1/malts/type/:maltType    interfaces.http.api.v1.malts.MaltsController.byType(maltType: String, page: Int ?= 0, size: Int ?= 20)" >> conf/routes
    echo "" >> conf/routes
    
    echo -e "‚úÖ ${GREEN}Routes API publique Malts ajout√©es${NC}"
else
    echo -e "‚úÖ ${GREEN}Routes API Malts d√©j√† pr√©sentes${NC}"
fi

# =============================================================================
# √âTAPE 6 : CR√âATION D'UN SCRIPT DE TEST
# =============================================================================

echo -e "\n${YELLOW}üß™ √âTAPE 6 : Cr√©ation du script de test${NC}"

cat > test_malts_apis.sh << 'EOF'
#!/bin/bash

# Script de test des APIs Malts compl√®tes
BASE_URL="http://localhost:9000"
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${BLUE}üåæ TEST COMPLET APIs MALTS${NC}"
echo "=============================="

# Test 1 : API Admin - Liste
echo -e "\n${BLUE}1. Test API Admin - Liste${NC}"
admin_response=$(curl -s "${BASE_URL}/api/admin/malts" || echo "ERROR")
echo "Admin Response: $admin_response"

if [ "$admin_response" != "ERROR" ] && echo "$admin_response" | jq . >/dev/null 2>&1; then
    admin_count=$(echo "$admin_response" | jq -r '.totalCount // 0')
    admin_length=$(echo "$admin_response" | jq -r '.malts | length // 0')
    echo -e "${GREEN}‚úÖ API Admin OK - $admin_length/$admin_count malts${NC}"
else
    echo -e "${RED}‚ùå API Admin KO${NC}"
fi

# Test 2 : API Publique - Liste
echo -e "\n${BLUE}2. Test API Publique - Liste${NC}"
public_response=$(curl -s "${BASE_URL}/api/v1/malts" || echo "ERROR")
echo "Public Response: $public_response"

if [ "$public_response" != "ERROR" ] && echo "$public_response" | jq . >/dev/null 2>&1; then
    public_count=$(echo "$public_response" | jq -r '.totalCount // 0')
    public_length=$(echo "$public_response" | jq -r '.malts | length // 0')
    echo -e "${GREEN}‚úÖ API Publique OK - $public_length/$public_count malts${NC}"
else
    echo -e "${RED}‚ùå API Publique KO${NC}"
fi

# Test 3 : Recherche Avanc√©e
echo -e "\n${BLUE}3. Test Recherche Avanc√©e${NC}"
search_data='{
  "name": "malt",
  "minEbc": 0,
  "maxEbc": 50,
  "page": 0,
  "size": 10
}'

search_response=$(curl -s -X POST \
  -H "Content-Type: application/json" \
  -d "$search_data" \
  "${BASE_URL}/api/v1/malts/search" || echo "ERROR")

echo "Search Response: $search_response"

if [ "$search_response" != "ERROR" ] && echo "$search_response" | jq . >/dev/null 2>&1; then
    search_length=$(echo "$search_response" | jq -r '.malts | length // 0')
    echo -e "${GREEN}‚úÖ Recherche OK - $search_length r√©sultats${NC}"
else
    echo -e "${RED}‚ùå Recherche KO${NC}"
fi

# Test 4 : Malts par type
echo -e "\n${BLUE}4. Test Malts par Type BASE${NC}"
type_response=$(curl -s "${BASE_URL}/api/v1/malts/type/BASE" || echo "ERROR")
echo "Type BASE Response: $type_response"

if [ "$type_response" != "ERROR" ] && echo "$type_response" | jq . >/dev/null 2>&1; then
    type_length=$(echo "$type_response" | jq -r '.malts | length // 0')
    echo -e "${GREEN}‚úÖ Type BASE OK - $type_length malts${NC}"
else
    echo -e "${RED}‚ùå Type BASE KO${NC}"
fi

# Test 5 : D√©tail d'un malt (si on en a trouv√© un)
if [ "$public_response" != "ERROR" ] && echo "$public_response" | jq . >/dev/null 2>&1; then
    first_malt_id=$(echo "$public_response" | jq -r '.malts[0].id // empty')
    if [ -n "$first_malt_id" ] && [ "$first_malt_id" != "null" ]; then
        echo -e "\n${BLUE}5. Test D√©tail Malt - ID: $first_malt_id${NC}"
        detail_response=$(curl -s "${BASE_URL}/api/v1/malts/$first_malt_id" || echo "ERROR")
        echo "Detail Response: $detail_response"
        
        if [ "$detail_response" != "ERROR" ] && echo "$detail_response" | jq . >/dev/null 2>&1; then
            malt_name=$(echo "$detail_response" | jq -r '.name // "Unknown"')
            echo -e "${GREEN}‚úÖ D√©tail OK - Malt: $malt_name${NC}"
        else
            echo -e "${RED}‚ùå D√©tail KO${NC}"
        fi
    else
        echo -e "\n${YELLOW}‚ö†Ô∏è Aucun malt trouv√© pour test d√©tail${NC}"
    fi
fi

echo -e "\n${BLUE}Tests termin√©s${NC}"
echo "=================="

# R√©sum√©
echo -e "\n${YELLOW}üìã R√©sum√©:${NC}"
echo -e "‚Ä¢ API Admin:    $([ "$admin_response" != "ERROR" ] && echo -e "${GREEN}‚úÖ" || echo -e "${RED}‚ùå")${NC}"
echo -e "‚Ä¢ API Publique: $([ "$public_response" != "ERROR" ] && echo -e "${GREEN}‚úÖ" || echo -e "${RED}‚ùå")${NC}"
echo -e "‚Ä¢ Recherche:    $([ "$search_response" != "ERROR" ] && echo -e "${GREEN}‚úÖ" || echo -e "${RED}‚ùå")${NC}"
echo -e "‚Ä¢ Type BASE:    $([ "$type_response" != "ERROR" ] && echo -e "${GREEN}‚úÖ" || echo -e "${RED}‚ùå")${NC}"

if [ "$admin_response" != "ERROR" ] && [ "$public_response" != "ERROR" ]; then
    echo -e "\n${GREEN}üéâ Domaine Malts fonctionnel !${NC}"
else
    echo -e "\n${RED}‚ö†Ô∏è V√©rifiez les logs SBT pour plus de d√©tails${NC}"
fi
EOF

chmod +x test_malts_apis.sh

echo -e "‚úÖ ${GREEN}Script de test cr√©√©: ./test_malts_apis.sh${NC}"

# =============================================================================
# √âTAPE 7 : TEST DE COMPILATION
# =============================================================================

echo -e "\n${YELLOW}‚öôÔ∏è  √âTAPE 7 : Test de compilation${NC}"

echo "Compilation du projet..."
if sbt compile; then
    echo -e "‚úÖ ${GREEN}Compilation r√©ussie !${NC}"
else
    echo -e "‚ùå ${RED}Erreurs de compilation${NC}"
    echo "V√©rifiez les imports et d√©pendances manquantes."
fi

# =============================================================================
# INSTRUCTIONS FINALES
# =============================================================================

echo -e "\n${BLUE}üéâ COMPL√âTION TERMIN√âE !${NC}"
echo "========================="

echo -e "\n${GREEN}‚úÖ R√©alisations:${NC}"
echo "‚Ä¢ Queries publiques cr√©√©es (MaltListQuery, MaltDetailQuery, MaltSearchQuery)"
echo "‚Ä¢ ReadModels publiques cr√©√©s (MaltReadModel, MaltListResponse)"
echo "‚Ä¢ Handlers publiques cr√©√©s (avec debug d√©taill√©)"
echo "‚Ä¢ API publique compl√©t√©e (MaltsController)"
echo "‚Ä¢ Routes ajout√©es dans conf/routes"
echo "‚Ä¢ Script de test g√©n√©r√© (test_malts_apis.sh)"

echo -e "\n${YELLOW}üìã Pour tester:${NC}"
echo "1. D√©marrer l'application: sbt run"
echo "2. Dans un autre terminal: ./test_malts_apis.sh"
echo "3. V√©rifier les logs de debug dans la console SBT"

echo -e "\n${YELLOW}üîç URLs disponibles:${NC}"
echo "‚Ä¢ GET    /api/v1/malts                    (liste publique)"
echo "‚Ä¢ GET    /api/v1/malts/:id               (d√©tail public)"
echo "‚Ä¢ POST   /api/v1/malts/search            (recherche avanc√©e)"
echo "‚Ä¢ GET    /api/v1/malts/type/:type        (malts par type)"
echo "‚Ä¢ GET    /api/admin/malts                (liste admin)"

echo -e "\n${GREEN}Le domaine Malts est maintenant complet avec APIs publiques et admin !${NC}"
echo -e "${BLUE}Si le SlickMaltReadRepository √©tait corrig√© pr√©c√©demment, tout devrait fonctionner.${NC}"
